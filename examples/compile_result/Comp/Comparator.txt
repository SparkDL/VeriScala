class Comparator(clk: HDL[Boolean], rst: HDL[Boolean],
  a: HDL[Signed], b: HDL[Signed], z: HDL[Signed]) extends HDLClass {
  def comp = module {
    sync(clk, 1) {
      when (rst) {
        z := 0
      } .otherwise {
        when (a > b) {
          z := 1
        } .elsewhen (a < b) {
          z := -1
        } .otherwise {
          z := 0
        }
      }
    }
  }

  override val toCompile = List(comp)
}



HDLGreaterThan(HDLReg a,HDLReg b)
HDLLessThan(HDLReg a,HDLReg b)
module comp(
clk,
rst,
a,
b,
z
);

input clk;
input rst;
input signed [4:0] a;
input signed [4:0] b;
output signed [1:0] z;
reg signed [1:0] z;

initial begin
z = 0;
end

always @(posedge clk) begin
if (rst == 1) begin
z <= 0;
end
else begin
if ((a > b)) begin
z <= 1;
end
else if ((a < b)) begin
z <= -1;
end
else begin
z <= 0;
end

end

end

endmodule
